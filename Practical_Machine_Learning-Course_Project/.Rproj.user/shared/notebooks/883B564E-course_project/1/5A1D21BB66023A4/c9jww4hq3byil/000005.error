{"frames":[{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train(classe ~ ., data = training, method = \"rf\", prox = TRUE, \n    preProcess = \"pca\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train.formula(classe ~ ., data = training, method = \"rf\", prox = TRUE, \n    preProcess = \"pca\")","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train(x, y, weights = w, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"train.default(x, y, weights = w, ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"nominalTrainWorkflow(x = x, y = y, wts = weights, info = trainInfo, \n    method = models, ppOpts = preProcess, ctrl = trControl, lev = classLevels, \n    ...)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"foreach(iter = seq(along = resampleIndex), .combine = \"c\", .verbose = FALSE, \n    .export = export, .packages = \"caret\") %:% foreach(parm = 1L:nrow(info$loop), \n    .combine = \"c\", .verbose = FALSE, .export = export, .packages = \"caret\") %op% \n    { ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"e$fun(obj, substitute(ex), parent.frame(), e$data)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch({\n    repeat {\n        args <- nextElem(it)\n        if (obj$verbose) { ...","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatch(eval(xpr, envir = envir), error = function(e) e)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchList(expr, classes, parentenv, handlers)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"tryCatchOne(expr, names, parentenv, handlers[[1L]])","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"doTryCatch(return(expr), name, parentenv, handler)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(xpr, envir = envir)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"eval(xpr, envir = envir)","line_number":0},{"character_number":0,"end_character_number":0,"end_line_number":0,"file":"","func":"data.frame(pred = predicted, obs = y[holdoutIndex], stringsAsFactors = FALSE)","line_number":0}],"message":"Error : cannot allocate vector of size 2.9 Gb\n"}