confusionMatrix(training$classe, predict(lda_model, training))[[3]][1]
confusionMatrix(testing$classe, predict(lda_model, testing))[[3]][1]
inTrain = createDataPartition(training$classe, p = 1/2)[[1]]
training = training[ inTrain,]
testing = training[-inTrain,]
lda_model <- train(classe ~ ., data = training, method = "lda")
confusionMatrix(training$classe, predict(lda_model, training))[[3]][1]
confusionMatrix(testing$classe, predict(lda_model, testing))[[3]][1]
str(training)
confusionMatrix(training$classe, predict(lda_model, training[, -57]))[[3]][1]
confusionMatrix(testing$classe, predict(lda_model, testing[, -57]))[[3]][1]
cor(training)
cor(training[, -57])
M <- abs(cor(training[, -57]))
diag(M) <- 0
M
which(M > 0.8)
?which
which(M > 0.8, arr.ind = TRUE)
which(M > 0.8, arr.ind = TRUE)
nrow(which(M > 0.8, arr.ind = TRUE))
confusionMatrix(predict(lda_model, training[, -57]), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing[, -57]), testing$classe)[[3]][1]
lda_model
postResample(predict(lda_model, testing[, -57]), testing$classe)
options(digits = 5)
confusionMatrix(predict(lda_model, training), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
options(digits = 8)
confusionMatrix(predict(lda_model, training), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
formatC(confusionMatrix(predict(lda_model, training), training$classe)[[3]][1], format = "e", digits = 2)
formatC(confusionMatrix(predict(lda_model, training), training$classe)[[3]][1], format = "e", digits = 8)
formatC(confusionMatrix(predict(lda_model, training), training$classe)[[3]][1], digits = 8)
formatC(confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1], digits = 8)
lda_model
class(lda_model)
lda_model[1]
lda_model[5]
lda_model[10]
lda_model[15]
lda_model[2]
lda_model[3]
lda_model[4]
lda_model[5]
confusionMatrix(predict(lda_model, training), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
fitControl <- trainControl(method= "repeatedcv", number = 5, repeats = 3)
gbm_model <- train(classe ~ ., data = training, method = "gbm", verbose = FALSE, trControl = fitControl)
prediction <- read.csv("pml-testing.csv")
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
print(class(training$Var))
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
str(prediction)
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
str(prediction)
training <- read.csv("pml-training.csv")
training <- read.csv("pml-training.csv")
prediction <- read.csv("pml-testing.csv")
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
str(prediction)
predict(lda_model, prediction[, -57])
predict(lda_model, testing[, -57])
str(predict(lda_model, testing[, -57]))
predict(lda_model, training[, -57])
View(predict(lda_model, testing[, -57]))
View(predict(lda_model, prediction[, -57]))
fitControl <- trainControl(method= "repeatedcv", number = 5, repeats = 3, verboseIter = TRUE)
gbm_model <- train(classe ~ ., data = training, method = "gbm", verbose = FALSE, trControl = fitControl)
confusionMatrix(training$classe, predict(gbm_model, training))
confusionMatrix(testing$classe, predict(gbm_model, testing))
predict(gbm_model, prediction[, -57])
str(training)
lda_model <- train(classe ~ X + raw_timestamp_part_1, data = training, method = "lda")
confusionMatrix(predict(lda_model, training), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
predict(lda_model, prediction[, -57])
str(training)
str(prediction)
lda_model
predict(lda_model, prediction[,1:2])
lda_model <- train(classe ~ gyros_belt_x + gyros_belt_y, data = training, method = "lda")
confusionMatrix(predict(lda_model, training), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
predict(lda_model, prediction[,1:2])
predict(lda_model, prediction)
predict(lda_model, prediction[, 9:10])
predict(lda_model, prediction[, 9:11])
predict(lda_model, prediction[, 9:14])
predict(lda_model, prediction[, 1:14])
predict(lda_model, prediction[, 1:15])
predict(lda_model, prediction[, 1:9])
lda_model <- train(classe ~ 1:10, data = training, method = "lda")
lda_model <- train(classe ~ X, data = training, method = "lda")
confusionMatrix(predict(lda_model, training), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
predict(lda_model, prediction)
training <- read.csv("pml-training.csv")
for (Var in names(training)) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
r
prediction <- read.csv("pml-testing.csv")
for (Var in names(training)) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
training[, classe] <- as.numeric(as.character(training[, classe]))
str(training)
training <- read.csv("pml-training.csv")
str(training)
str(training$classe)
names(training)
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
for (Var in names(training[,-160])) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
names(training[,-160])
names(training)[-160]
names(training)
str(training)
training <- read.csv("pml-training.csv")
str(training)
names(training)
names(training)[-160]
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
names(training)[-160]
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
print(Var)
training[, Var] <- as.numeric(as.character(training[, Var]))
prediction[, Var] <- as.numeric(as.character(prediction[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
prediction <- prediction[, !(names(prediction) %in% Var)]
}
}
names(training)
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
print(Var)
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
}
}
training[, classe] <- as.numeric(as.character(training[, classe]))
names(training)
training <- read.csv("pml-training.csv")
for (Var in names(training)) {
if (class(training[, Var]) == "factor") {
print(Var)
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
training <- training[, !(names(training) %in% Var)]
}
}
names(training)
exclude <- charater(0)
exclude <- character(0)
for (Var in names(training)) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[,Var]))
if (missing > 19000) {
exclude <- cbind(exclude, Var)
}
}
exclude
for (Var in names(training)) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[, Var]))
if (missing > 19000) {
print(Var)
exclude <- cbind(exclude, Var)
}
}
training <- read.csv("pml-training.csv")
exclude <- character(0)
for (Var in names(training)) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[, Var]))
if (missing > 19000) {
exclude <- cbind(exclude, Var)
}
}
exclude
View(exclude)
sum(is.na(training$classe))
sum(is.na(training$classe))
str(training$classe)
sum(is.na(training$classe))
str(training)
training <- read.csv("pml-training.csv")
str(training$classe)
sum(is.na(training$classe))
training[, classe] <- as.numeric(as.character(training[, classe]))
sum(is.na(training$classe))
str(training$classe)
training[, classe] <- as.numeric(as.character(training[, classe]))
training$classe <- as.numeric(as.character(training$classe))
exclude <- character(0)
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[, Var]))
if (missing > 19000) {
exclude <- cbind(exclude, Var)
}
}
View(exclude)
sum(is.na(training$classe))
sum(is.na(training))
training <- read.csv("pml-training.csv")
str(training)
sum(is.na(training))
exclude <- character(0)
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[, Var]))
if (missing > 19000) {
exclude <- cbind(exclude, Var)
}
}
View(exclude)
sum(is.na(training$classe))
training[,-which(names(training) == exclude)]
-which(names(training) == exclude)
-which(names(training) %in% exclude)
training[,-which(names(training) %in% exclude)]
str(training)
training[,-which(names(training) %in% exclude)]
training <- training[,-which(names(training) %in% exclude)]
str(training)
set.seed(123)
inTrain = createDataPartition(training$classe, p = 3/4)[[1]]
training = training[ inTrain,]
testing = training[-inTrain,]
lda_model <- train(classe ~ X, data = training, method = "lda")
confusionMatrix(predict(lda_model, training), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
predict(lda_model, prediction[, -57])
table(training$classe)
sum(is.na(training))
str(training)
lda_model <- train(classe ~ X, data = training, method = "lda")
confusionMatrix(predict(lda_model, training), training$classe)[[3]][1]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
lda_model
predict(lda_model, prediction)
predict(gbm_model, prediction[, -57])
lda_model
lda_model[[1]]
lda_model[[5]]
lda_model[[2]]
lda_model[[3]]
lda_model[[4]]
lda_model[[4]][2]
lda_model[[4]][[2]]
lda_model[[4]][[2]]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
table(predict(lda_model, testing), testing$classe)
confusionMatrix(predict(lda_model, testing), testing$classe)
predict(lda_model, testing)
table(predict(lda_model, testing))
table(predict(gbm_model, testing))
predict(gbm_model, testing))
predict(gbm_model, testing)
training$X
str(training)
lda_model <- train(classe ~ . -X, data = training, method = "lda")
lda_model <- train(classe ~ . -X, data = training, method = "lda")
lda_model[[4]][[2]]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
predict(lda_model, prediction)
fitControl <- trainControl(method= "repeatedcv", number = 5, repeats = 3, verboseIter = TRUE)
gbm_model <- train(classe ~ . - X, data = training, method = "gbm", verbose = FALSE, trControl = fitControl)
fitControl <- trainControl(method= "repeatedcv", number = 5, repeats = 3, verboseIter = TRUE)
library(caret)
fitControl <- trainControl(method= "repeatedcv", number = 5, repeats = 3, verboseIter = TRUE)
gbm_model <- train(classe ~ . - X, data = training, method = "gbm", verbose = FALSE, trControl = fitControl)
gbm_model[[4]][[2]]
gbm_model[[4]]
gbm_model[[5]]
gbm_model
gbm_model$finalModel
confusionMatrix(testing$classe, predict(gbm_model, testing))
predict(gbm_model, prediction)
gbm_model$finalModel
summary(gbm_model$finalModel)
gbm_model
gbm_model[[1]]
gbm_model[[2]]
gbm_model[[3]]
gbm_model[[4]]
gbm_model[[4]][2]
gbm_model[[4]][3]
gbm_model[[4]][5]
gbm_model[[4]][5][9]
gbm_model[[4]][[5]]
gbm_model[[4]][[5]][9]
confusionMatrix(testing$classe, predict(gbm_model, testing))
confusionMatrix(testing$classe, predict(gbm_model, testing))[[3]][1]
gbm_model[[4]][[5]][9]
cor(traning$classe, training$X)
cor(training$classe, training$X)
cor(as.character(training$classe), training$X)
cor(as.numeric(as.character(training$classe)), training$X)
lda_model[[4]][[2]]
confusionMatrix(predict(lda_model, testing), testing$classe)[[3]][1]
gbm_model[[4]][[5]][9]
confusionMatrix(testing$classe, predict(gbm_model, testing))[[3]][1]
predict(lda_model, prediction)
predict(gbm_model, prediction)
confusionMatrix(predict(lda_model, prediction), predict(gbm_model, prediction))
sum(predict(lda_model, prediction) != predict(gbm_model, prediction))
str(training)
M <- abs(cor(training[, -57]))
diag(M) <- 0
which(M > 0.8, arr.ind = TRUE)
training <- read.csv("pml-training.csv")
training <- read.csv("pml-training.csv")
prediction <- read.csv("pml-testing.csv")
str(training)
sum(is.na(training))
exclude <- character(0)
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[, Var]))
if (missing > 19000) {
exclude <- cbind(exclude, Var)
}
}
training <- training[,-which(names(training) %in% exclude)]
str(training)
sum(is.na(training))
M <- abs(cor(training[, -57]))
diag(M) <- 0
which(M > 0.8, arr.ind = TRUE)
install.packages(c("lme4", "rlang", "spam", "xts"))
View(prediction)
knit_with_parameters('D:/R_projects/datasciencecoursera/Practical_Machine_Learning-course_project/course_project.Rmd')
unlink('course_project_cache', recursive = TRUE)
library(ggplot2)
library(rlang)
install.packages("rlang")
library(ggplot2)
View(exclude)
training <- read.csv("pml-training.csv")
prediction <- read.csv("pml-testing.csv")
sum(is.na(training))
exclude <- character(0)
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[, Var]))
if (missing > 19000) {
exclude <- cbind(exclude, Var)
}
}
training <- training[,-which(names(training) %in% exclude)]
str(training)
sum(is.na(training))
cor(training[, -57])
M <- abs(cor(training[, -57]))
diag(M) <- 0
which(M > 0.8, arr.ind = TRUE)
unlink('course_project_cache', recursive = TRUE)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_TIME", "English")
library(knitr)
library(caret)
training <- read.csv("pml-training.csv")
prediction <- read.csv("pml-testing.csv")
str(training)
sum(is.na(training))
sum(is.na(training))
M <- abs(cor(training[, -57]))
M <- abs(cor(training[, -57]))
exclude <- character(0)
for (Var in names(training)[-160]) {
if (class(training[, Var]) == "factor") {
training[, Var] <- as.numeric(as.character(training[, Var]))
}
missing <- sum(is.na(training[, Var]))
if (missing > 19000) {
exclude <- cbind(exclude, Var)
}
}
training <- training[,-which(names(training) %in% exclude)]
str(training)
M <- abs(cor(training[, -57]))
diag(M) <- 0
which(M > 0.8, arr.ind = TRUE)
nrow(names(training))
count(names(training))
length(names(training))
length(names(training))
M <- abs(cor(training[, -57]))
diag(M) <- 0
which(M > 0.8, arr.ind = TRUE)
knitr::opts_chunk$set(echo = TRUE)
Sys.setlocale("LC_TIME", "English")
library(knitr)
library(caret)
training <- read.csv("pml-training.csv")
prediction <- read.csv("pml-testing.csv")
str(training)
sum(is.na(training))
sum(is.na(training))
length(names(training))
M <- abs(cor(training[, -57]))
